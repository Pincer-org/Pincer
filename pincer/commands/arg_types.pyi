from ..objects.app.command import AppCommandOptionChoice as AppCommandOptionChoice
from ..utils.types import MISSING as MISSING
from typing import Any, List, T, Tuple, Union

class _CommandTypeMeta(type):
    def __getitem__(cls, args: Union[Tuple, Any]): ...

class CommandArg(metaclass=_CommandTypeMeta):
    command_type: Any
    modifiers: Any
    def __init__(self, command_type, *args) -> None: ...
    def get_arg(self, arg_type: T) -> T: ...

class Modifier(metaclass=_CommandTypeMeta): ...

class Description(Modifier):
    desc: Any
    def __init__(self, desc) -> None: ...
    def get_payload(self) -> str: ...

class Choice(Modifier):
    name: Any
    value: Any
    def __init__(self, name, value) -> None: ...

class Choices(Modifier):
    choices: Any
    def __init__(self, *choices) -> None: ...
    def get_payload(self) -> List[AppCommandOptionChoice]: ...

class ChannelTypes(Modifier):
    types: Any
    def __init__(self, *types) -> None: ...
    def get_payload(self): ...

class MaxValue(Modifier):
    max_value: Any
    def __init__(self, max_value) -> None: ...
    def get_payload(self): ...

class MinValue(Modifier):
    min_value: Any
    def __init__(self, min_value) -> None: ...
    def get_payload(self): ...
