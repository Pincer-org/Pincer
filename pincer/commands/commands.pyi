from . import __package__ as __package__
from ..client import Client as Client
from ..commands.arg_types import ChannelTypes as ChannelTypes, Choices as Choices, CommandArg as CommandArg, Description as Description, MaxValue as MaxValue, MinValue as MinValue
from ..exceptions import CommandAlreadyRegistered as CommandAlreadyRegistered, CommandDescriptionTooLong as CommandDescriptionTooLong, CommandIsNotCoroutine as CommandIsNotCoroutine, ForbiddenError as ForbiddenError, InvalidArgumentAnnotation as InvalidArgumentAnnotation, InvalidCommandGuild as InvalidCommandGuild, InvalidCommandName as InvalidCommandName, TooManyArguments as TooManyArguments
from ..objects import AppCommand as AppCommand, Channel as Channel, Guild as Guild, Mentionable as Mentionable, MessageContext as MessageContext, Role as Role, ThrottleScope as ThrottleScope, User as User
from ..objects.app import AppCommandOption as AppCommandOption, AppCommandOptionType as AppCommandOptionType, AppCommandType as AppCommandType, ClientCommandStructure as ClientCommandStructure
from ..utils import get_index as get_index, should_pass_ctx as should_pass_ctx
from ..utils.signature import get_signature_and_params as get_signature_and_params
from ..utils.snowflake import Snowflake as Snowflake
from ..utils.types import MISSING as MISSING, Singleton as Singleton
from typing import Any, Dict, List, Optional, Union

REGULAR_COMMAND_NAME_REGEX: Any
CHAT_INPUT_COMMAND_NAME_REGEX: Any

def command(func: Any | None = ..., *, name: Optional[str] = ..., description: Optional[str] = ..., enable_default: Optional[bool] = ..., guild: Union[Snowflake, int, str] = ..., cooldown: Optional[int] = ..., cooldown_scale: Optional[float] = ..., cooldown_scope: Optional[ThrottleScope] = ...): ...
def user_command(func: Any | None = ..., *, name: Optional[str] = ..., enable_default: Optional[bool] = ..., guild: Union[Snowflake, int, str] = ..., cooldown: Optional[int] = ..., cooldown_scale: Optional[float] = ..., cooldown_scope: Optional[ThrottleScope] = ...): ...
def message_command(func: Any | None = ..., *, name: Optional[str] = ..., enable_default: Optional[bool] = ..., guild: Union[Snowflake, int, str] = ..., cooldown: Optional[int] = ..., cooldown_scale: Optional[float] = ..., cooldown_scope: Optional[ThrottleScope] = ...): ...
def register_command(func: Any | None = ..., *, app_command_type: Optional[AppCommandType] = ..., name: Optional[str] = ..., description: Optional[str] = ..., enable_default: Optional[bool] = ..., guild: Optional[Union[Snowflake, int, str]] = ..., cooldown: Optional[int] = ..., cooldown_scale: Optional[float] = ..., cooldown_scope: Optional[ThrottleScope] = ..., command_options=...): ...

class ChatCommandHandler(metaclass=Singleton):
    managers: Dict[str, Any]
    register: Dict[str, ClientCommandStructure]
    client: Any
    def __init__(self, client: Client): ...
    async def get_commands(self) -> List[AppCommand]: ...
    async def remove_command(self, cmd: AppCommand): ...
    async def add_command(self, cmd: AppCommand): ...
    async def add_commands(self, commands: List[AppCommand]): ...
    async def initialize(self) -> None: ...

def hash_app_command(command: AppCommand) -> int: ...
def hash_app_command_params(name: str, guild_id: Snowflake, app_command_type: AppCommandType) -> int: ...
