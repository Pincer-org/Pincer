from ..commands import ChatCommandHandler as ChatCommandHandler, hash_app_command_params as hash_app_command_params
from ..core.dispatch import GatewayDispatch as GatewayDispatch
from ..exceptions import InteractionDoesNotExist as InteractionDoesNotExist
from ..objects import AppCommandType as AppCommandType, Interaction as Interaction, MessageContext as MessageContext
from ..utils import Coro as Coro, MISSING as MISSING, get_index as get_index, should_pass_cls as should_pass_cls, should_pass_ctx as should_pass_ctx
from ..utils.conversion import construct_client_dict as construct_client_dict
from ..utils.signature import get_signature_and_params as get_signature_and_params
from typing import Any, Dict, List, Tuple

async def interaction_response_handler(self, command: Coro, context: MessageContext, interaction: Interaction, args: List[Any], kwargs: Dict[str, Any]): ...
async def interaction_handler(self, interaction: Interaction, context: MessageContext, command: Coro): ...
def get_command_from_registry(interaction: Interaction): ...
async def interaction_create_middleware(self, payload: GatewayDispatch) -> Tuple[str, Interaction]: ...
def export() -> Coro: ...
