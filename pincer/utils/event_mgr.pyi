import abc
from .types import CheckFunction as CheckFunction
from abc import ABC, abstractmethod
from typing import Any, Optional

class _Processable(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def process(self, event_name: str, event_value: Any): ...
    def matches_event(self, event_name: str, event_value: Any): ...

class _Event(_Processable):
    event_name: Any
    check: Any
    event: Any
    return_value: Any
    def __init__(self, event_name: str, check: CheckFunction) -> None: ...
    async def wait(self) -> None: ...
    def process(self, event_name: str, event_value: Any) -> bool: ...

class _LoopEmptyError(Exception): ...

class _LoopMgr(_Processable):
    event_name: Any
    check: Any
    can_expand: bool
    events: Any
    wait: Any
    def __init__(self, event_name: str, check: CheckFunction) -> None: ...
    def process(self, event_name: str, event_value: Any): ...
    async def get_next(self): ...

class EventMgr:
    event_list: Any
    def __init__(self) -> None: ...
    def process_events(self, event_name, event_value) -> None: ...
    async def wait_for(self, event_name: str, check: CheckFunction, timeout: Optional[float]) -> Any: ...
    async def loop_for(self, event_name: str, check: CheckFunction, iteration_timeout: Optional[float], loop_timeout: Optional[float]) -> Any: ...
