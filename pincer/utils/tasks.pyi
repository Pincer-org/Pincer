from . import __package__ as __package__
from ..exceptions import TaskAlreadyRunning as TaskAlreadyRunning, TaskCancelError as TaskCancelError, TaskInvalidDelay as TaskInvalidDelay, TaskIsNotCoroutine as TaskIsNotCoroutine
from .insertion import should_pass_cls as should_pass_cls
from .types import Coro as Coro
from typing import Any, Callable

class TaskScheduler:
    client: Any
    tasks: Any
    def __init__(self, client) -> None: ...
    def loop(self, days: int = ..., weeks: int = ..., hours: int = ..., minutes: int = ..., seconds: int = ..., milliseconds: int = ..., microseconds: int = ...) -> Callable[[Coro], Task]: ...
    def register(self, task: Task): ...
    def close(self) -> None: ...

class Task:
    coro: Any
    delay: Any
    def __init__(self, scheduler: TaskScheduler, coro: Coro, delay: float) -> None: ...
    def __del__(self) -> None: ...
    @property
    def cancelled(self): ...
    @property
    def running(self): ...
    def start(self) -> None: ...
    def cancel(self) -> None: ...
    @property
    def client_required(self): ...
