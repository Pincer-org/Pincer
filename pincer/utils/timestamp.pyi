from datetime import datetime
from typing import Optional, TypeVar, Union

DISCORD_EPOCH: int
TS = TypeVar('TS', str, datetime, float, int)

class Timestamp:
    def __init__(self, time: Optional[TS] = ...) -> None: ...
    @classmethod
    def __factory__(cls, time: Optional[TS] = ...) -> datetime: ...
    @staticmethod
    def to_epoch(time: datetime) -> int: ...
    @staticmethod
    def string_to_datetime(string: str) -> datetime: ...
    @staticmethod
    def epoch_to_datetime(epoch: Union[int, float]) -> datetime: ...
    @staticmethod
    def parse(time: Optional[TS] = ...) -> datetime: ...
    def __getattr__(self, key: str) -> int: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __ge__(self, other: Timestamp) -> bool: ...
    def __gt__(self, other: Timestamp) -> bool: ...
    def __le__(self, other: Timestamp) -> bool: ...
    def __lt__(self, other: Timestamp) -> bool: ...
    def __eq__(self, other: Timestamp) -> bool: ...
    def __ne__(self, other: Timestamp) -> bool: ...
